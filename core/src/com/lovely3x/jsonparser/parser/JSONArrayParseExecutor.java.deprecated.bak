package com.lovely3x.jsonparser.parser;

import com.lovely3x.jsonparser.JSONStructuralType;
import com.lovely3x.jsonparser.JSONType;
import com.lovely3x.jsonparser.model.Stack;
import com.lovely3x.jsonparser.source.JSONSource;
import com.lovely3x.jsonparser.utils.CommonUtils;

/**
 * Created by lovely3x on 15-6-30.
 * 解析数据执行者,默认的JSONArray解析器使用的这个进行解析
 */
public class JSONArrayParseExecutor {

    /**
     * 解析指定的数据
     *
     * @param mSource  解析的数据源
     * @param callback 解析时的回调
     */
    public void parse(JSONSource mSource, ParseExecutorCallback callback) {

        if (mSource == null || callback == null) {
            throw new IllegalArgumentException("JSONSource and callback not valid.");
        }

        //获取数据源
        final String sourceString = mSource.input();

        //找到开始符号和结束符号
        final char leftBoundSymbol = JSONStructuralType.STRUCTURAL_LEFT_SQUARE_BRACKET;
        final char rightBoundSymbol = JSONStructuralType.STRUCTURAL_RIGHT_SQUARE_BRACKET;

        //定义起始位置和结束位置
        final int count = sourceString.lastIndexOf(String.valueOf(rightBoundSymbol));
        final int startPosition = sourceString.indexOf(String.valueOf(leftBoundSymbol)) + 1;

        //左方括弧栈
        Stack leftSquareBracket = new Stack();
        //左花括弧栈
        Stack leftCurlyBracket = new Stack();
        //左方括弧下标栈
        Stack indexOfLeftSquareBracket = new Stack();
        //左方括弧下标栈
        Stack indexOfLeftCurlyBracket = new Stack();

        //逗号下标栈
        Stack indexOfCommaStack = new Stack();
        //逗号栈
        Stack commaStack = new Stack();

        //右方括弧栈
        Stack rightSquareBracket = new Stack();
        //右花括弧栈
        Stack rightCurlyBracket = new Stack();
        //右方括弧下标栈
        Stack indexOfRightSquareBracket = new Stack();
        //右花括弧下标栈
        Stack indexOfRightCurlyBracket = new Stack();

        //转义字符栈下标栈
        Stack indexOfEscapeStack = new Stack();
        //转义字符栈
        Stack escapeStack = new Stack();

        //引号栈
        Stack quoteStack = new Stack();
        //引号下标栈
        Stack indexOfQuoteStack = new Stack();

        //上一个操作字符
        char preOperatingCharacter = JSONStructuralType.STRUCTURAL_INVALIDATE;

        for (int i = startPosition; i < count; i++) {
            //Log.e("","leftSquare stack " + leftSquareBracket);
            char currentChar = sourceString.charAt(i);
            switch (currentChar) {
                case JSONStructuralType.STRUCTURAL_LEFT_CURLY_BRACKET:
                    //如果当前没有对方括弧采集
                    if (leftSquareBracket.size() == 0) {
                        leftCurlyBracket.push(currentChar);
                        indexOfLeftCurlyBracket.push(i);
                        preOperatingCharacter = currentChar;
                        //preOperatingCharactorIndex = i;
                    }
                    break;
                case JSONStructuralType.STRUCTURAL_RIGHT_CURLY_BRACKET:
                    if (leftCurlyBracket.size() > 0) {
                        //将符号和位置压入栈中,便于统计
                        rightCurlyBracket.push(currentChar);
                        indexOfRightCurlyBracket.push(i);
                        //如果两边的花括弧的数量相同,则认为应该取出该段字符串了
                        if (leftCurlyBracket.size() == rightCurlyBracket.size()) {
                            int subStartPosition = indexOfLeftCurlyBracket.get(0);
                            callback.onParsed(sourceString.substring(subStartPosition, i + 1));
                            //清除花括弧栈数据
                            leftCurlyBracket.clear();
                            rightCurlyBracket.clear();
                            indexOfLeftCurlyBracket.clear();
                            indexOfRightCurlyBracket.clear();

                            preOperatingCharacter = currentChar;
                            //preOperatingCharactorIndex = i;
                        }
                    }
                    break;
                case JSONStructuralType.STRUCTURAL_LEFT_SQUARE_BRACKET:
                    if (leftCurlyBracket.size() == 0) {
                        leftSquareBracket.push(currentChar);
                        indexOfLeftSquareBracket.push(i);

                        preOperatingCharacter = currentChar;
                        //preOperatingCharactorIndex = i;
                    }
                    break;
                case JSONStructuralType.STRUCTURAL_RIGHT_SQUARE_BRACKET:
                    if (leftSquareBracket.size() > 0) {
                        //将符号和位置压入栈中,便于统计
                        rightSquareBracket.push(currentChar);
                        indexOfRightSquareBracket.push(i);
                        //如果两边的花括弧的数量相同,则认为应该取出该段字符串了
                        if (leftSquareBracket.size() == rightSquareBracket.size()) {
                            int subStartPosition = indexOfLeftSquareBracket.get(0);
                            callback.onParsed(sourceString.substring(subStartPosition, i + 1));
                            //清除方括弧栈
                            leftSquareBracket.clear();
                            rightSquareBracket.clear();
                            indexOfLeftSquareBracket.clear();
                            indexOfRightSquareBracket.clear();

                            preOperatingCharacter = currentChar;
                            //preOperatingCharactorIndex = i;
                        }
                    }
                    break;
                case JSONStructuralType.ESCAPE:
                    if (leftCurlyBracket.size() == 0 && leftSquareBracket.size() == 0) {
                        //将转义字符压入栈中
                        escapeStack.push(currentChar);
                        indexOfEscapeStack.push(i);

                        preOperatingCharacter = currentChar;
                        //  preOperatingCharactorIndex = i;
                    }
                    break;
                case JSONStructuralType.STRUCTURAL_COMMA://逗号
                    //没有进行数据采集
                    if (leftCurlyBracket.size() == 0
                            && leftSquareBracket.size() == 0
                            && quoteStack.size() % 2 == 0
                            ) {

                        //如果上一个操作符号不是对象或数组
                        if (preOperatingCharacter != JSONStructuralType.STRUCTURAL_RIGHT_CURLY_BRACKET
                                && preOperatingCharacter != JSONStructuralType.STRUCTURAL_RIGHT_SQUARE_BRACKET
                                && preOperatingCharacter != JSONStructuralType.QUOTE) {
                            if (commaStack.size() == 0) {//第一个元素
                                callback.onParsed(sourceString.substring(startPosition, i));
                            } else {
                                callback.onParsed(sourceString.substring(indexOfCommaStack.get(indexOfCommaStack.size() - 1) + 1, i));
                            }
                        }
                        commaStack.push(currentChar);
                        indexOfCommaStack.push(i);
                        preOperatingCharacter = currentChar;
                        // preOperatingCharactorIndex = i;
                    }
                    break;
                case JSONStructuralType.QUOTE://引号
                    if (leftCurlyBracket.size() == 0 && leftSquareBracket.size() == 0) {
                        //上一个不是转义符号
                        if (preOperatingCharacter != JSONStructuralType.ESCAPE) {
                            preOperatingCharacter = JSONStructuralType.QUOTE;
                            quoteStack.push(currentChar);
                            indexOfQuoteStack.push(i);

                            //如果已经存在两个非转义引号了(有一对了啊)
                            if (quoteStack.size() % 2 == 0) {
                                callback.onParsed(sourceString.substring(
                                        indexOfQuoteStack.get(
                                                indexOfQuoteStack.size() - 2),
                                        indexOfQuoteStack.get(indexOfQuoteStack.size() - 1) + 1));
                                //quoteStack.clear();
                                //indexOfQuoteStack.clear();
                            }
                        }
                    }
                    break;
            }

            //    Log.e("JSONArrayParseExecutor", "commaStack -> " + commaStack);
            //末尾,可能存在数据
            if (i + 1 == count
                    && leftCurlyBracket.size() == 0
                    && leftSquareBracket.size() == 0
                    && quoteStack.size() % 2 == 0
                    && indexOfCommaStack.size() > 0 && preOperatingCharacter != JSONStructuralType.QUOTE) {
                switch (preOperatingCharacter) {
                    case JSONStructuralType.STRUCTURAL_RIGHT_SQUARE_BRACKET:
                    case JSONStructuralType.STRUCTURAL_RIGHT_CURLY_BRACKET:
                        break;
                    default:
                        callback.onParsed(sourceString.substring(indexOfCommaStack.get(indexOfCommaStack.size() - 1) + 1, count));
                        break;
                }
            }
            //修复#2 Issue
            if (i + 1 == count) {
                if (leftCurlyBracket.size() == 0
                        && leftSquareBracket.size() == 0
                        && quoteStack.size() % 2 == 0
                        && preOperatingCharacter == JSONStructuralType.STRUCTURAL_INVALIDATE
                        ) {
                    String str = sourceString.substring(startPosition + 1, count);
                    switch (CommonUtils.guessType(str)) {
                        case JSONType.JSON_TYPE_NULL:
                        case JSONType.JSON_TYPE_BOOLEAN:
                        case JSONType.JSON_TYPE_INT:
                        case JSONType.JSON_TYPE_LONG:
                        case JSONType.JSON_TYPE_FLOAT:
                        case JSONType.JSON_TYPE_DOUBLE:
                            callback.onParsed(str);
                            break;
                    }
                }
            }
        }
    }

}
