package com.lovely3x.jsonparser.parser;

import com.lovely3x.jsonparser.Config;
import com.lovely3x.jsonparser.model.JSONKey;
import com.lovely3x.jsonparser.model.JSONPairFactory;
import com.lovely3x.jsonparser.model.JSONPairFactoryImpl;
import com.lovely3x.jsonparser.model.JSONValue;
import com.lovely3x.jsonparser.source.JSONSource;

import java.util.HashMap;

/**
 * Created by lovely3x on 15-6-30.
 * JSONObject
 */

public class JSONObjectParser implements ParseExecutorCallback {

    private static final String TAG = "JSONObjectParser";
    /**
     * json 数据源
     */
    private final JSONSource mSource;
    /**
     * 键值对工厂
     */
    private final JSONPairFactory mFactory;

    /**
     * json对
     */
    private HashMap<JSONKey, JSONValue> mPair = new HashMap<>();

    /**
     * 是否正在等待 值
     */
    private boolean waitingValue;

    /**
     * key 源数据
     */
    private String keySource;


    /**
     * 通过指定的数据源和默认的键值对工厂创建一个JSON对象
     *
     * @param source 指定的数据源
     */
    public JSONObjectParser(Config config,JSONSource source) {
        this(source, config.pairFactory);
    }

    /**
     * 通过制定json数据源和键值对工厂创建JSONObjectParser
     *
     * @param source
     * @param factory
     */
    public JSONObjectParser(JSONSource source, JSONPairFactory factory) {
        this.mSource = source;
        this.mFactory = factory;
        this.mPair = new HashMap<>();
    }

    /**
     * 解析
     *
     * @return
     */
    public HashMap<JSONKey, JSONValue> parse() {
        parseJSONObject(mSource);
        return this.mPair;
    }

    /**
     * 解析制定的JsonObject
     *
     * @param source
     */
    private void parseJSONObject(JSONSource source) {
        new JSONObjectParseExecutor().parse(source, this);
    }

    /**
     * 解析出一个key
     *
     * @param key
     */
    private void onKey(String key) {
        waitingValue = true;
        keySource = key;

    }

    /**
     * 解析出一个value
     *
     * @param value
     */
    private void onValue(String value) {
        waitingValue = false;
        if (mFactory != null) {
            mPair.put(mFactory.getJSONKey(keySource), mFactory.getJSONValue(value));
        }
    }


    @Override
    public void onParsed(String currentStatement) {
        if (waitingValue) {
            onValue(currentStatement);
        } else {
            onKey(currentStatement);
        }
    }
}
